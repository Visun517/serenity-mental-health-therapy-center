package lk.ijse.gdse71.orm_course_work.controller;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import lk.ijse.gdse71.orm_course_work.bo.BoFactory;
import lk.ijse.gdse71.orm_course_work.bo.custom.UserBo;
import lk.ijse.gdse71.orm_course_work.bo.exception.MissingFieldException;
import lk.ijse.gdse71.orm_course_work.dto.UserDto;
import lk.ijse.gdse71.orm_course_work.dto.tm.UserTm;

import java.net.URL;
import java.sql.SQLException;
import java.util.List;
import java.util.ResourceBundle;

public class UserRoleMangeController implements Initializable {

    @FXML
    private Button btnDelete;

    @FXML
    private Button btnSave;

    @FXML
    private Button btnUpadate;

    @FXML
    private TableColumn<UserTm, String> colUserId;

    @FXML
    private TableColumn<UserTm, String> colUserName;

    @FXML
    private TableColumn<UserTm, String> colUserPassword;

    @FXML
    private TableColumn<UserTm, String> colUserRole;

    @FXML
    private ComboBox<String> comboBoxRole;

    @FXML
    private Label lblHeader;

    @FXML
    private Label lblPassword;

    @FXML
    private Label lblRole;

    @FXML
    private Label lblUserId;

    @FXML
    private Label lblUserIdShow;

    @FXML
    private Label lblUserName;

    @FXML
    private TableView<UserTm> tblUser;

    @FXML
    private TextField txtPassword;

    @FXML
    private TextField txtUserName;

    private final UserBo userBo = BoFactory.getInstance().getBo(BoFactory.BOType.USER);

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        colUserId.setCellValueFactory(new PropertyValueFactory<>("user_id"));
        colUserName.setCellValueFactory(new PropertyValueFactory<>("username"));
        colUserRole.setCellValueFactory(new PropertyValueFactory<>("role"));
        comboInit();
        refresh();
    }

    @FXML
    void btnSaveOnAction(ActionEvent event) {
        String username = txtUserName.getText().trim();
        String password = txtPassword.getText().trim();
        String role = comboBoxRole.getValue();

        // Regex patterns
        String usernameRegex = "^[a-zA-Z0-9_]{3,20}$";
        String passwordRegex = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$";

        // Validate username
        if (username.isEmpty()) {
            new Alert(Alert.AlertType.ERROR, "Username cannot be empty!").show();
            return;
        } else if (!username.matches(usernameRegex)) {
            new Alert(Alert.AlertType.ERROR, "Invalid username! Use 3-20 characters (letters, numbers, underscores only).").show();
            return;
        }

        // Validate password
        if (password.isEmpty()) {
            new Alert(Alert.AlertType.ERROR, "Password cannot be empty!").show();
            return;
        } else if (!password.matches(passwordRegex)) {
            new Alert(Alert.AlertType.ERROR, "Invalid password! Must be at least 8 characters, with 1 uppercase, 1 lowercase, 1 number, and 1 special character (e.g., Passw0rd!).").show();
            return;
        }

        // Validate role
        if (role == null || role.isEmpty()) {
            new Alert(Alert.AlertType.ERROR, "Please select a role!").show();
            return;
        }

        // Additional validation: Check if username already exists
        try {
            List<UserDto> existingUsers = userBo.getAll();
            for (UserDto user : existingUsers) {
                if (user.getUsername().equals(username) && !user.getUser_id().equals(lblUserIdShow.getText())) {
                    new Alert(Alert.AlertType.ERROR, "Username already exists!").show();
                    return;
                }
            }

            UserDto userDto = new UserDto();
            userDto.setUser_id(lblUserIdShow.getText());
            userDto.setUsername(username);
            userDto.setPassword(password);
            userDto.setRole(role);

            boolean isSaved = userBo.save(userDto);
            if (isSaved) {
                new Alert(Alert.AlertType.INFORMATION, "User is saved...!").show();
                refresh();
            } else {
                new Alert(Alert.AlertType.ERROR, "User is not saved...!").show();
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } catch (MissingFieldException e) {
            new Alert(Alert.AlertType.ERROR, e.getMessage()).show();
        }
    }

    @FXML
    void btnUpadateOnAction(ActionEvent event) {
        String username = txtUserName.getText().trim();
        String password = txtPassword.getText().trim();
        String role = comboBoxRole.getValue();

        // Regex patterns
        String usernameRegex = "^[a-zA-Z0-9_]{3,20}$";
        String passwordRegex = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$";

        // Validate username
        if (username.isEmpty()) {
            new Alert(Alert.AlertType.ERROR, "Username cannot be empty!").show();
            return;
        } else if (!username.matches(usernameRegex)) {
            new Alert(Alert.AlertType.ERROR, "Invalid username! Use 3-20 characters (letters, numbers, underscores only).").show();
            return;
        }

        // Validate password
        if (password.isEmpty()) {
            new Alert(Alert.AlertType.ERROR, "Password cannot be empty!").show();
            return;
        } else if (!password.matches(passwordRegex)) {
            new Alert(Alert.AlertType.ERROR, "Invalid password! Must be at least 8 characters, with 1 uppercase, 1 lowercase, 1 number, and 1 special character (e.g., Passw0rd!).").show();
            return;
        }

        // Validate role
        if (role == null || role.isEmpty()) {
            new Alert(Alert.AlertType.ERROR, "Please select a role!").show();
            return;
        }

        // Additional validation: Check if username already exists
        try {
            List<UserDto> existingUsers = userBo.getAll();
            for (UserDto user : existingUsers) {
                if (user.getUsername().equals(username) && !user.getUser_id().equals(lblUserIdShow.getText())) {
                    new Alert(Alert.AlertType.ERROR, "Username already exists!").show();
                    return;
                }
            }

            UserDto userDto = new UserDto();
            userDto.setUser_id(lblUserIdShow.getText());
            userDto.setUsername(username);
            userDto.setPassword(password);
            userDto.setRole(role);

            boolean isUpdated = userBo.update(userDto);
            if (isUpdated) {
                new Alert(Alert.AlertType.INFORMATION, "User is updated...!").show();
                refresh();
            } else {
                new Alert(Alert.AlertType.ERROR, "User is not updated...!").show();
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    @FXML
    void btnDeleteOnAction(ActionEvent event) {
        String userId = lblUserIdShow.getText();
        try {
            boolean isDelete = userBo.delete(userId);
            if (isDelete) {
                new Alert(Alert.AlertType.INFORMATION, "User is deleted...!").show();
                refresh();
            } else {
                new Alert(Alert.AlertType.ERROR, "User is not deleted...!").show();
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    @FXML
    void comboBoxRoleOnAction(ActionEvent event) {
        // No validation needed here
    }

    @FXML
    void tblUserOncliked(MouseEvent event) {
        UserTm selectedItem = tblUser.getSelectionModel().getSelectedItem();

        if (selectedItem != null) {
            lblUserIdShow.setText(selectedItem.getUser_id());
            txtUserName.setText(selectedItem.getUsername());
            comboBoxRole.setValue(selectedItem.getRole());
            txtPassword.setText(""); // Clear password field for security
        }
    }

    public void comboInit() {
        String[] roles = {"Admin", "Receptionist"};
        comboBoxRole.getItems().addAll(roles);
    }

    public void refresh() {
        txtPassword.setText("");
        txtUserName.setText("");
        comboBoxRole.setValue("Admin");

        try {
            lblUserIdShow.setText(userBo.getNextId());
            getAll();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void getAll() {
        try {
            List<UserDto> users = userBo.getAll();
            ObservableList<UserTm> userTms = FXCollections.observableArrayList();

            for (UserDto user : users) {
                UserTm userTm = new UserTm();
                userTm.setUser_id(user.getUser_id());
                userTm.setUsername(user.getUsername());
                userTm.setRole(user.getRole());

                userTms.add(userTm);
            }
            tblUser.setItems(userTms);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
}